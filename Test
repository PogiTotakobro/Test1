
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Mouse = game.Players.LocalPlayer:GetMouse()
local CamlockState = false
local Prediction = 0.14664
local HorizontalPrediction = 0.14664
local VerticalPrediction = 0.07
local XPrediction = 0.14664
local YPrediction = 0.07

local Players = game:GetService("Players")	
local LP = Players.LocalPlayer	
local Mouse = LP:GetMouse()	

local Locked = true

getgenv().Key = "q"

function FindNearestEnemy()
    local ClosestDistance, ClosestPlayer = math.huge, nil
    local CenterPosition =
        Vector2.new(
        game:GetService("GuiService"):GetScreenResolution().X / 2,
        game:GetService("GuiService"):GetScreenResolution().Y / 2
    )

    for _, Player in ipairs(game:GetService("Players"):GetPlayers()) do
        if Player ~= LocalPlayer then
            local Character = Player.Character
            if Character and Character:FindFirstChild("HumanoidRootPart") and Character.Humanoid.Health > 0 then
                local Position, IsVisibleOnViewport =
                    game:GetService("Workspace").CurrentCamera:WorldToViewportPoint(Character.HumanoidRootPart.Position)

                if IsVisibleOnViewport then
                    local Distance = (CenterPosition - Vector2.new(Position.X, Position.Y)).Magnitude
                    if Distance < ClosestDistance then
                        ClosestPlayer = Character.HumanoidRootPart
                        ClosestDistance = Distance
                    end
                end
            end
        end
    end

    return ClosestPlayer
end

local enemy = nil
-- Function to aim the camera at the nearest enemy's HumanoidRootPart
RunService.Heartbeat:Connect(
    function()
        if CamlockState == true then
            if enemy then
                local camera = workspace.CurrentCamera
                
camera.CFrame = CFrame.new(
    camera.CFrame.p,
    enemy.Position + Vector3.new(
        enemy.Velocity.X * HorizontalPrediction,
        enemy.Velocity.Y * VerticalPrediction,
        enemy.Velocity.Z * Prediction
    )
)

            end
        end
    end
)

Mouse.KeyDown:Connect(function(k)	
    if k == getgenv().Key then	
            Locked = not Locked	
            if Locked then	
                enemy = FindNearestEnemy()
                CamlockState = true
             else	
                if enemy ~= nil then	
                    enemy = nil	
                    CamlockState = false
                end	
            end	
    end	
 end)

local MythicLock = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local Logo = Instance.new("ImageLabel")
local TextButton = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")

--Properties:

MythicLock.Name = "MythicLock"
MythicLock.Parent = game.CoreGui
MythicLock.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = MythicLock
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Black
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.133798108, 0, 0.20107238, 0)
Frame.Size = UDim2.new(0, 202, 0, 70)
Frame.Active = true
Frame.Draggable = true

local function TopContainer()
	Frame.Position = UDim2.new(0.5, -Frame.AbsoluteSize.X / 2, 0, -Frame.AbsoluteSize.Y / 2)
end

TopContainer()
Frame:GetPropertyChangedSignal("AbsoluteSize"):Connect(TopContainer)

UICorner.Parent = Frame

Logo.Name = "Logo"
Logo.Parent = Frame
Logo.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Black
Logo.BackgroundTransparency = 5.000
Logo.BorderColor3 = Color3.fromRGB(0, 0, 0)
Logo.BorderSizePixel = 0
Logo.Position = UDim2.new(0.326732665, 0, 0, 0)
Logo.Size = UDim2.new(0, 70, 0, 70)
Logo.Image = "rbxassetid://94474379485493"
Logo.ImageTransparency = 0.200

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Black
TextButton.BackgroundTransparency = 5.000
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.0792079195, 0, 0.18571429, 0)
TextButton.Size = UDim2.new(0, 170, 0, 44)
TextButton.Font = Enum.Font.SourceSansSemibold
TextButton.Text = "Toggle CamLock"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0) -- Purple
TextButton.TextScaled = true
TextButton.TextSize = 14.000
TextButton.TextWrapped = true
local state = true
TextButton.MouseButton1Click:Connect(
    function()
        state = not state
        if not state then
            TextButton.Text = "MythicLock ON"
            CamlockState = true
            enemy = FindNearestEnemy()
        else
            TextButton.Text = "MythicLock OFF"
            CamlockState = false
            enemy = nil
        end
    end
)


-- Add FOV functionality

local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false -- Initially hidden
FOVCircle.Color = Color3.fromRGB(0, 0, 0) -- Black
FOVCircle.Transparency = 0.1 -- Low transparency
FOVCircle.Thickness = 1
FOVCircle.Radius = 50 -- Small size
FOVCircle.Filled = true -- Filled

-- Show FOV circle when locking onto an enemy
RunService.RenderStepped:Connect(function()
    if CamlockState and enemy then
        local camera = workspace.CurrentCamera
        local viewportPoint, onScreen = camera:WorldToViewportPoint(enemy.Position)
        if onScreen then
            FOVCircle.Position = Vector2.new(viewportPoint.X, viewportPoint.Y)
            FOVCircle.Visible = true
        else
            FOVCircle.Visible = false
        end
    else
        FOVCircle.Visible = false
    end
end)

local AutoAirState = false

local AutoAirButton = Instance.new("TextButton")
AutoAirButton.Parent = Frame
AutoAirButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- White background
AutoAirButton.BorderColor3 = Color3.fromRGB(0, 0, 0) -- Black outline
AutoAirButton.BorderSizePixel = 1 -- Outline thickness
AutoAirButton.Position = UDim2.new(0.1, 0, 0.8, 0) -- Adjusted position below other buttons
AutoAirButton.Size = UDim2.new(0, 100, 0, 25) -- Compact size
AutoAirButton.Font = Enum.Font.SourceSansSemibold
AutoAirButton.Text = "Auto Air"
AutoAirButton.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text
AutoAirButton.TextScaled = true

-- Add UICorner for rounded square shape
local AutoAirButtonCorner = Instance.new("UICorner")
AutoAirButtonCorner.CornerRadius = UDim.new(0.2, 0) -- Adjust for desired roundness
AutoAirButtonCorner.Parent = AutoAirButton

-- AutoAir button functionality
AutoAirButton.MouseButton1Click:Connect(
    function()
        AutoAirState = not AutoAirState
        if AutoAirState then
            AutoAirButton.Text = "AutoAir ON"
        else
            AutoAirButton.Text = "AutoAir OFF"
        end
    end
)

-- Auto Air functionality: Shoot once when the target jumps
local hasShot = false

RunService.RenderStepped:Connect(function()
    if AutoAirState and CamlockState and enemy then
        local targetHumanoid = enemy.Parent:FindFirstChild("Humanoid")
        if targetHumanoid and not hasShot and (targetHumanoid:GetState() == Enum.HumanoidStateType.Jumping or targetHumanoid:GetState() == Enum.HumanoidStateType.Freefall) then
            hasShot = true
            task.wait(0.22) -- Delay of 0.22 seconds
            local playerCharacter = LocalPlayer.Character
            local tool = playerCharacter and playerCharacter:FindFirstChildOfClass("Tool")
            if tool then
                tool:Activate()
            end
        elseif targetHumanoid and targetHumanoid:GetState() ~= Enum.HumanoidStateType.Jumping and targetHumanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
            hasShot = false -- Reset after the target is no longer jumping
        end
    end
end)

-- Create a frame for the Prediction changer GUI
local FallOffset = 0.05
local JumpOffset = 0.1

local PredictionFrame = Instance.new("Frame")
PredictionFrame.Parent = MythicLock
PredictionFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Black
PredictionFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
PredictionFrame.BorderSizePixel = 0
PredictionFrame.Position = UDim2.new(0.5, -150, 0.5, -150) -- Center of the screen
PredictionFrame.Size = UDim2.new(0, 300, 0, 200) -- Increased size for new inputs
PredictionFrame.Visible = false -- Initially hidden
PredictionFrame.Active = true
PredictionFrame.Draggable = true

local PredictionTitle = Instance.new("TextLabel")
PredictionTitle.Parent = PredictionFrame
PredictionTitle.Text = "Prediction Changer"
PredictionTitle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PredictionTitle.TextColor3 = Color3.fromRGB(128, 128, 128) -- Purple
PredictionTitle.Size = UDim2.new(1, 0, 0.2, 0)
PredictionTitle.Font = Enum.Font.SourceSansBold
PredictionTitle.TextScaled = true

local PredictionInput = Instance.new("TextBox")
PredictionInput.Parent = PredictionFrame
PredictionInput.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PredictionInput.TextColor3 = Color3.fromRGB(128, 128, 128) -- Purple
PredictionInput.Position = UDim2.new(0.1, 0, 0.3, 0)
PredictionInput.Size = UDim2.new(0.8, 0, 0.2, 0)
PredictionInput.Font = Enum.Font.SourceSansSemibold
PredictionInput.Text = tostring(Prediction)
PredictionInput.PlaceholderText = "Main Prediction"
PredictionInput.TextScaled = true

local HorizontalPredictionInput = Instance.new("TextBox")
HorizontalPredictionInput.Parent = PredictionFrame
HorizontalPredictionInput.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
HorizontalPredictionInput.TextColor3 = Color3.fromRGB(128, 128, 128) -- Purple
HorizontalPredictionInput.Position = UDim2.new(0.1, 0, 0.55, 0)
HorizontalPredictionInput.Size = UDim2.new(0.8, 0, 0.2, 0)
HorizontalPredictionInput.Font = Enum.Font.SourceSansSemibold
HorizontalPredictionInput.Text = tostring(HorizontalPrediction)
HorizontalPredictionInput.PlaceholderText = "Horizontal Prediction"
HorizontalPredictionInput.TextScaled = true

local VerticalPredictionInput = Instance.new("TextBox")
VerticalPredictionInput.Parent = PredictionFrame
VerticalPredictionInput.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
VerticalPredictionInput.TextColor3 = Color3.fromRGB(128, 128, 128) -- Purple
VerticalPredictionInput.Position = UDim2.new(0.1, 0, 0.8, 0)
VerticalPredictionInput.Size = UDim2.new(0.8, 0, 0.2, 0)
VerticalPredictionInput.Font = Enum.Font.SourceSansSemibold
VerticalPredictionInput.Text = tostring(VerticalPrediction)
VerticalPredictionInput.PlaceholderText = "Vertical Prediction"
VerticalPredictionInput.TextScaled = true

local FallOffsetInput = Instance.new("TextBox")
FallOffsetInput.Parent = PredictionFrame
FallOffsetInput.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
FallOffsetInput.TextColor3 = Color3.fromRGB(128, 128, 128) -- Purple
FallOffsetInput.Position = UDim2.new(0.1, 0, 1.05, 0)
FallOffsetInput.Size = UDim2.new(0.8, 0, 0.2, 0)
FallOffsetInput.Font = Enum.Font.SourceSansSemibold
FallOffsetInput.Text = tostring(FallOffset)
FallOffsetInput.PlaceholderText = "Fall Offset"
FallOffsetInput.TextScaled = true

local JumpOffsetInput = Instance.new("TextBox")
JumpOffsetInput.Parent = PredictionFrame
JumpOffsetInput.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
JumpOffsetInput.TextColor3 = Color3.fromRGB(128, 128, 128) -- Purple
JumpOffsetInput.Position = UDim2.new(0.1, 0, 1.3, 0)
JumpOffsetInput.Size = UDim2.new(0.8, 0, 0.2, 0)
JumpOffsetInput.Font = Enum.Font.SourceSansSemibold
JumpOffsetInput.Text = tostring(JumpOffset)
JumpOffsetInput.PlaceholderText = "Jump Offset"
JumpOffsetInput.TextScaled = true

-- Button to toggle the visibility of the Prediction changer GUI
local MythicButton = Instance.new("TextButton") -- Renamed to "Mythic"
MythicButton.Parent = Frame
MythicButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- White background
MythicButton.BorderColor3 = Color3.fromRGB(0, 0, 0) -- Black outline
MythicButton.BorderSizePixel = 1 -- Define the outline thickness
MythicButton.Position = UDim2.new(0.0792079195, 0, 1.2, 0)
MythicButton.Size = UDim2.new(0, 120, 0, 30)
MythicButton.Font = Enum.Font.SourceSansSemibold
MythicButton.Text = "Mythic Gui" -- Updated text
MythicButton.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text
MythicButton.TextScaled = true

-- Add UICorner for rounded square shape
local MythicButtonCorner = Instance.new("UICorner")
MythicButtonCorner.CornerRadius = UDim.new(0.2, 0) -- Adjust for desired roundness
MythicButtonCorner.Parent = MythicButton

MythicButton.MouseButton1Click:Connect(function()
    PredictionFrame.Visible = not PredictionFrame.Visible
end)

-- Update prediction values when focus is lost
PredictionInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newValue = tonumber(PredictionInput.Text)
        if newValue then
            Prediction = newValue
        end
        PredictionInput.Text = tostring(Prediction)
    end
end)

HorizontalPredictionInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newValue = tonumber(HorizontalPredictionInput.Text)
        if newValue then
            HorizontalPrediction = newValue
        end
        HorizontalPredictionInput.Text = tostring(HorizontalPrediction)
    end
end)

VerticalPredictionInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newValue = tonumber(VerticalPredictionInput.Text)
        if newValue then
            VerticalPrediction = newValue
        end
        VerticalPredictionInput.Text = tostring(VerticalPrediction)
    end
end)

FallOffsetInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newValue = tonumber(FallOffsetInput.Text)
        if newValue then
            FallOffset = newValue
        end
        FallOffsetInput.Text = tostring(FallOffset)
    end
end)

JumpOffsetInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newValue = tonumber(JumpOffsetInput.Text)
        if newValue then
            JumpOffset = newValue
        end
        JumpOffsetInput.Text = tostring(JumpOffset)
    end
end)

-- Make the Toggle Prediction Button draggable for mobile users
local UIS = game:GetService("UserInputService")
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MythicButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

MythicButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MythicButton.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MythicButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)
